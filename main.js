(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>s});var o=n(354),a=n.n(o),r=n(314),i=n.n(r)()(a());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poetsen+One&display=swap);"]),i.push([t.id,':root {\n  --darkBrown: #402c2c;\n  --darkLateGray: #2f4f4f;\n}\n\n* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.check-icon {\n  width: 45px;\n}\n\nh1 {\n  font-family: "Poetsen One", "Roboto", sans-serif;\n  font-size: 36px;\n  letter-spacing: 2px;\n  color: #303f3f;\n  text-shadow: 2px 2px 2px #362a2abd;\n  margin: 15px 2px;\n}\n\n.plus {\n  width: 17px;\n}\n\n.todo-add-btn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 4px 6px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n/* project section */\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: var(--darkLateGray);\n  cursor: pointer;\n  border-style: groove;\n  border-radius: 15px 0 15px 0;\n  transition: 0.3s;\n}\n\n#myProjects:hover {\n  background-color: rgba(59, 95, 95, 0.99);\n  border-radius: 0 15px 0 15px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n  font-size: 16px;\n  gap: 5px;\n  padding: 9px 7px;\n  border: none;\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n#addBtn:hover {\n  background-color: #fcd9ae;\n}\n\n.projects {\n  display: flex;\n  flex-direction: column;\n  width: 23%;\n  height: 628px;\n  overflow: auto;\n  gap: 5px;\n  background-color: #d3d3d373;\n}\n\n.projects-btns {\n  font-family: fantasy, "Roboto", sans-serif;\n  letter-spacing: 1px;\n  font-weight: 500;\n  font-size: 14px;\n  padding: 10px;\n  background-color: white;\n  color: #000028;\n  border: none;\n  border-bottom: 2px solid var(--darkLateGray);\n  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n.projects-btns:hover {\n  padding-left: 20px;\n  border-bottom: 2px solid bisque;\n}\n\n.projects-btns:active {\n  box-shadow: none;\n}\n\n.project-dialog {\n  animation: fade-out 0.5s ease-out;\n}\n\n.project-dialog::backdrop {\n  background-color: black;\n  opacity: 0.5;\n}\n\n.project-dialog[open] {\n  animation: fadein 0.5s ease-in forwards;\n}\n\n@keyframes fadein {\n  0% {\n    opacity: 0;\n    transform: scale(0);\n    display: none;\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale(1);\n    display: block;\n  }\n}\n\n@keyframes fade-out {\n  0% {\n    opacity: 1;\n    transform: scale(1);\n    display: block;\n  }\n\n  100% {\n    opacity: 0;\n    transform: scale(0);\n    display: none;\n  }\n}\n\n.project-list {\n  width: 100%;\n  padding: 10px 20px;\n}\n\n.project-list h2 {\n  font-family: "Poetsen One", sans-serif;\n  font-size: 27px;\n  color: var(--darkBrown);\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n  padding: 10px 20px;\n}\n\n.todo-list h3 {\n  font-family: monospace;\n  font-size: 28px;\n  color: var(--darkBrown);\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\n/* footer section */\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\nfooter p {\n  color: white;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAGA;EACE,oBAAoB;EACpB,uBAAuB;AACzB;;AAEA;EACE,iCAAiC;EACjC,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gDAAgD;EAChD,eAAe;EACf,mBAAmB;EACnB,cAAc;EACd,kCAAkC;EAClC,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA,oBAAoB;AACpB;EACE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,qCAAqC;EACrC,eAAe;EACf,oBAAoB;EACpB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,wCAAwC;EACxC,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,aAAa;EACb,cAAc;EACd,QAAQ;EACR,2BAA2B;AAC7B;;AAEA;EACE,0CAA0C;EAC1C,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,cAAc;EACd,YAAY;EACZ,4CAA4C;EAC5C,8CAA8C;EAC9C,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,+BAA+B;AACjC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE;IACE,UAAU;IACV,mBAAmB;IACnB,aAAa;EACf;;EAEA;IACE,UAAU;IACV,mBAAmB;IACnB,cAAc;EAChB;AACF;;AAEA;EACE;IACE,UAAU;IACV,mBAAmB;IACnB,cAAc;EAChB;;EAEA;IACE,UAAU;IACV,mBAAmB;IACnB,aAAa;EACf;AACF;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,sCAAsC;EACtC,eAAe;EACf,uBAAuB;AACzB;;AAEA,kBAAkB;AAClB;EACE,aAAa;EACb,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA,mBAAmB;AACnB;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,eAAe;AACjB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");\n@import url("https://fonts.googleapis.com/css2?family=Poetsen+One&display=swap");\n\n:root {\n  --darkBrown: #402c2c;\n  --darkLateGray: #2f4f4f;\n}\n\n* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.check-icon {\n  width: 45px;\n}\n\nh1 {\n  font-family: "Poetsen One", "Roboto", sans-serif;\n  font-size: 36px;\n  letter-spacing: 2px;\n  color: #303f3f;\n  text-shadow: 2px 2px 2px #362a2abd;\n  margin: 15px 2px;\n}\n\n.plus {\n  width: 17px;\n}\n\n.todo-add-btn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 4px 6px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n/* project section */\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: var(--darkLateGray);\n  cursor: pointer;\n  border-style: groove;\n  border-radius: 15px 0 15px 0;\n  transition: 0.3s;\n}\n\n#myProjects:hover {\n  background-color: rgba(59, 95, 95, 0.99);\n  border-radius: 0 15px 0 15px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n  font-size: 16px;\n  gap: 5px;\n  padding: 9px 7px;\n  border: none;\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n#addBtn:hover {\n  background-color: #fcd9ae;\n}\n\n.projects {\n  display: flex;\n  flex-direction: column;\n  width: 23%;\n  height: 628px;\n  overflow: auto;\n  gap: 5px;\n  background-color: #d3d3d373;\n}\n\n.projects-btns {\n  font-family: fantasy, "Roboto", sans-serif;\n  letter-spacing: 1px;\n  font-weight: 500;\n  font-size: 14px;\n  padding: 10px;\n  background-color: white;\n  color: #000028;\n  border: none;\n  border-bottom: 2px solid var(--darkLateGray);\n  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n.projects-btns:hover {\n  padding-left: 20px;\n  border-bottom: 2px solid bisque;\n}\n\n.projects-btns:active {\n  box-shadow: none;\n}\n\n.project-dialog {\n  animation: fade-out 0.5s ease-out;\n}\n\n.project-dialog::backdrop {\n  background-color: black;\n  opacity: 0.5;\n}\n\n.project-dialog[open] {\n  animation: fadein 0.5s ease-in forwards;\n}\n\n@keyframes fadein {\n  0% {\n    opacity: 0;\n    transform: scale(0);\n    display: none;\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale(1);\n    display: block;\n  }\n}\n\n@keyframes fade-out {\n  0% {\n    opacity: 1;\n    transform: scale(1);\n    display: block;\n  }\n\n  100% {\n    opacity: 0;\n    transform: scale(0);\n    display: none;\n  }\n}\n\n.project-list {\n  width: 100%;\n  padding: 10px 20px;\n}\n\n.project-list h2 {\n  font-family: "Poetsen One", sans-serif;\n  font-size: 27px;\n  color: var(--darkBrown);\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n  padding: 10px 20px;\n}\n\n.todo-list h3 {\n  font-family: monospace;\n  font-size: 28px;\n  color: var(--darkBrown);\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\n/* footer section */\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\nfooter p {\n  color: white;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n'],sourceRoot:""}]);const s=i},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,a,r){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var r={},i=[],s=0;s<t.length;s++){var c=t[s],d=o.base?c[0]+o.base:c[0],l=r[d]||0,u="".concat(d," ").concat(l);r[d]=l+1;var A=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=a(p,o);o.byIndex=s,e.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var r=o(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<r.length;i++){var s=n(r[i]);e[s].references--}for(var c=o(t,a),d=0;d<r.length;d++){var l=n(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={id:o,exports:{}};return t[o](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0;var o={};(()=>{n.d(o,{uw:()=>v,pw:()=>E,VJ:()=>h,G$:()=>C,cH:()=>g,OQ:()=>gt});var t=n(72),e=n.n(t),a=n(825),r=n.n(a),i=n(659),s=n.n(i),c=n(56),d=n.n(c),l=n(540),u=n.n(l),A=n(113),p=n.n(A),m=n(208),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),e()(m.A,f),m.A&&m.A.locals&&m.A.locals;const h=n.p+"3d41484d7a6e692b1426.png",g=n.p+"f9cea8966e12ce82409b.png",C=n.p+"d286e04c0cb4c8a8a968.png",b={projects:y=[],createProject:(t,e)=>{const n={name:t,color:e,todos:[]};y.push(n)}};var y;const E=(t,e)=>{t.parentElement.style.opacity="0.5",t.style="text-decoration-line: line-through;",e.completed=!0},v=(t,e)=>{t.parentElement.style.opacity="",t.style="",e.completed=!1};let x=1;const B=t=>{const e=b.projects[t];localStorage.setItem(`Project ${t}`,JSON.stringify(e))},w=t=>{Z.style.display="none",_.style.display="block";const e=t.target.textContent.split("# ")[1];document.querySelectorAll(".project-container").forEach((t=>{const n=t.querySelector("h3").textContent;t.style.display=n===e?"block":"none"})),Z.style.display="none",_.style.display="block"};function k(t){return function(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}(t,Date.now())}function j(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function S(t,e){const n=j(t),o=j(e),a=n.getTime()-o.getTime();return a<0?-1:a>0?1:a}Math.pow(10,8);const M=43200,P=1440;function D(t){const e=j(t);return+function(t){const e=j(t);return e.setHours(23,59,59,999),e}(e)==+function(t){const e=j(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e)}function W(t,e){const n=j(t),o=j(e),a=S(n,o),r=Math.abs(function(t,e){const n=j(t),o=j(e);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(n,o));let i;if(r<1)i=0;else{1===n.getMonth()&&n.getDate()>27&&n.setDate(30),n.setMonth(n.getMonth()-a*r);let e=S(n,o)===-a;D(j(t))&&1===r&&1===S(t,o)&&(e=!1),i=a*(r-Number(e))}return 0===i?0:i}function q(t,e,n){const o=function(t,e){return+j(t)-+j(e)}(t,e)/1e3;return(a=n?.roundingMethod,t=>{const e=(a?Math[a]:Math.trunc)(t);return 0===e?0:e})(o);var a}const L={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function T(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const I={date:T({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:T({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:T({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},z={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;o=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;o=t.values[a]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const N={ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function O(t){return(e,n={})=>{const o=n.width,a=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],r=e.match(a);if(!r)return null;const i=r[0],s=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}const F={ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(X.matchPattern);if(!n)return null;const o=n[0],a=t.match(X.parsePattern);if(!a)return null;let r=X.valueCallback?X.valueCallback(a[0]):a[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(o.length)}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var X;const R={code:"en-US",formatDistance:(t,e,n)=>{let o;const a=L[t];return o="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:I,formatRelative:(t,e,n,o)=>z[t],localize:N,match:F,options:{weekStartsOn:0,firstWeekContainsDate:1}};let U={};function J(){return U}function H(t){const e=j(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function Q(t,e){return function(t,e,n){const o=J(),a=n?.locale??o.locale??R,r=S(t,e);if(isNaN(r))throw new RangeError("Invalid time value");const i=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:r});let s,c;r>0?(s=j(e),c=j(t)):(s=j(t),c=j(e));const d=q(c,s),l=(H(c)-H(s))/1e3,u=Math.round((d-l)/60);let A;if(u<2)return n?.includeSeconds?d<5?a.formatDistance("lessThanXSeconds",5,i):d<10?a.formatDistance("lessThanXSeconds",10,i):d<20?a.formatDistance("lessThanXSeconds",20,i):d<40?a.formatDistance("halfAMinute",0,i):d<60?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",1,i):0===u?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",u,i);if(u<45)return a.formatDistance("xMinutes",u,i);if(u<90)return a.formatDistance("aboutXHours",1,i);if(u<P){const t=Math.round(u/60);return a.formatDistance("aboutXHours",t,i)}if(u<2520)return a.formatDistance("xDays",1,i);if(u<M){const t=Math.round(u/P);return a.formatDistance("xDays",t,i)}if(u<2*M)return A=Math.round(u/M),a.formatDistance("aboutXMonths",A,i);if(A=W(c,s),A<12){const t=Math.round(u/M);return a.formatDistance("xMonths",t,i)}{const t=A%12,e=Math.trunc(A/12);return t<3?a.formatDistance("aboutXYears",e,i):t<9?a.formatDistance("overXYears",e,i):a.formatDistance("almostXYears",e+1,i)}}(t,k(t),e)}class V{constructor(t,e,n,o,a,r){this.id=t,this.title=e,this.description=n,this.dueDate=o,this.priority=a,this.completed=r}}const $=document.querySelector("h1"),G=new Image;G.src=C,G.classList.add("check-icon"),$.parentNode.insertBefore(G,$);const Z=document.querySelector(".project-list"),_=document.querySelector(".todo-list"),K=document.querySelector(".projects"),tt=document.querySelector("#create-pro"),et=document.querySelector("#myProjects"),nt=document.querySelector(".proNum"),ot=document.createElement("button"),at=document.querySelector("#cancel"),rt=document.querySelector(".project-dialog"),it=document.querySelector("#name"),st=document.querySelector("#color"),ct=document.querySelector("#title"),dt=document.querySelector("#description"),lt=document.querySelector("#date"),ut=document.querySelector("#priority");tt.addEventListener("click",(()=>{((t,e)=>{""!==t.value?(b.createProject(t.value,e.value),pt(t,e),(()=>{const t=b.projects.length,e=b.projects[t-1];localStorage.setItem("Project "+x++,JSON.stringify(e))})()):alert("Please Enter Project's Name!")})(it,st)}));const At=new Image;At.src=h,At.classList.add("plus"),ot.id="addBtn",ot.textContent="New Project",ot.insertBefore(At,ot.firstChild),ot.addEventListener("click",(()=>{rt.showModal()})),at.addEventListener("click",(()=>{rt.close()})),et.addEventListener("click",(()=>{Z.style.display="block",_.style.display="none"}));const pt=(t,e)=>{const n=document.createElement("button"),o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("span"),i=document.createElement("button");a.textContent=`# ${t.value||t} / todos: `,r.textContent="0",n.textContent=`# ${t.value||t}`,n.classList.add("projects-btns"),n.style.backgroundColor=`light${e.value||e}`,a.style.backgroundColor=`light${e.value||e}`,a.classList.add("project-info"),a.setAttribute("id",""),i.textContent="Remove Project",a.append(r,i),Z.appendChild(a),K.appendChild(n);const s=document.createElement("div"),c=document.createElement("h3");c.textContent=t.value||t,s.classList.add("project-container"),s.style.display="block";const d=new Image;d.src=g,d.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(d,o.firstChild),o.addEventListener("click",(()=>{mt.showModal()})),s.append(c,o);const l=c.textContent.split().splice(0,1).join();i.addEventListener("click",(()=>{((t,e,n,o)=>{t.remove(),e.remove(),n.remove();const a=b.projects;a.forEach(((t,e)=>{t.name===o&&(a.splice(e,1),(()=>{localStorage.clear();const t=b.projects;for(let e=0;e<t.length;e++)B(e)})())}))})(a,n,s,l),nt.textContent=b.projects.length})),nt.textContent=b.projects.length,n.addEventListener("click",w),"string"!=typeof t&&(t.value="",rt.close()),document.querySelectorAll(".project-container").forEach((t=>{t.style.display="none"})),_.appendChild(s)},mt=document.querySelector(".CreateTodo"),ft=document.querySelector("#cancel-todo");document.querySelector("#create-todo").addEventListener("click",(()=>{document.querySelectorAll(".project-container").forEach((t=>{"block"===t.style.display&&((t,e,n,o,a)=>{""!==e.value&&""!==n.value&&""!==o.value?(gt++,b.projects.forEach(((r,i)=>{if(r.name===t){const s=new V(gt,e.value,n.value,o.value,a.value,!1);r.todos.push(s),ht(e,n,o,s,t),B(i)}}))):alert("Please Fill The Required Fields")})(t.firstChild.textContent,ct,dt,lt,ut)}))})),ft.addEventListener("click",(()=>{mt.close()}));const ht=(t,e,n,o,a)=>{const r=document.createElement("div"),i=document.createElement("div"),s=document.createElement("input"),c=document.createElement("label"),d=document.createElement("p"),l=document.createElement("p"),u=document.createElement("div"),A=document.createElement("button"),p=document.createElement("button");i.classList.add("todo"),A.textContent="Delete",p.textContent="edit",s.setAttribute("type","checkbox"),s.setAttribute("id","todo"),s.setAttribute("name","todo"),c.setAttribute("for","todo");let m=n.value||n,f=Q(n.value||n,{addSuffix:!0});l.textContent=f,c.textContent=o.title,d.textContent=o.description,p.addEventListener("click",(()=>{((t,e,n,o,a,r,i)=>{const s=document.createElement("dialog");s.classList.add("edit-todo"),s.dataset.todoId=t.id;const c=document.createElement("h3");c.textContent="Edit Task",s.appendChild(c);const d=document.createElement("div"),l=document.createElement("label");l.setAttribute("for","edit-title"),l.textContent="Title :";const u=document.createElement("input");u.setAttribute("type","text"),u.setAttribute("id","edit-title"),u.setAttribute("name","edit-title"),u.setAttribute("placeholder","Enter Title"),u.value=o.textContent,d.appendChild(l),d.appendChild(u);const A=document.createElement("label");A.setAttribute("for","edit-description"),A.textContent="Description :";const p=document.createElement("input");p.setAttribute("type","text"),p.setAttribute("id","edit-description"),p.setAttribute("name","edit-description"),p.setAttribute("placeholder","Write Description"),p.value=a.textContent,d.appendChild(A),d.appendChild(p);const m=document.createElement("label");m.setAttribute("for","edit-date"),m.textContent="Due Date :";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","edit-date"),f.setAttribute("name","edit-date"),f.setAttribute("min","2024-01-01"),f.value=i,d.appendChild(m),d.appendChild(f);const h=document.createElement("label");h.setAttribute("for","edit-priority"),h.textContent="Set Priority :";const g=document.createElement("select");g.setAttribute("id","edit-priority"),g.setAttribute("name","edit-priority"),["Priority 1","Priority 2","Priority 3","Priority 4"].forEach((t=>{const e=document.createElement("option");e.value=t,e.textContent=t,g.appendChild(e)})),d.appendChild(h),d.appendChild(g);const C=document.createElement("button");C.setAttribute("id","cancel-edit"),C.textContent="Cancel",C.addEventListener("click",(()=>{s.close(),s.remove()}));const y=document.createElement("button");y.setAttribute("id","edit-todo"),y.textContent="Confirm",y.addEventListener("click",(()=>{((t,e,n,o,a,r,i,s,c)=>{b.projects.forEach(((n,o)=>{let a=n.todos;n.name===t&&(a.forEach((t=>{t===e&&(e.title=r.value,e.description=i.value,e.dueDate=s.value,e.priority=c.value)})),B(o))}));const d=Q(s.value,{addSuffix:!0});n.textContent=r.value,o.textContent=i.value,a.textContent=d})(e,n,o,a,r,u,p,f,g),s.close(),s.remove()})),d.appendChild(C),d.appendChild(y),s.appendChild(d),document.body.appendChild(s),s.showModal()})(o,a,o,c,d,l,m)})),s.addEventListener("change",(()=>{b.projects.forEach(((t,e)=>{s.checked?(E(c,o),t.name===a&&B(e)):(v(c,o),t.name===a&&B(e))}))})),p.setAttribute("id",c.textContent),u.append(p,A),i.append(s,c,d,l,u),r.appendChild(i),document.querySelectorAll(".project-container").forEach((t=>{t.querySelector("h3").textContent===a&&t.appendChild(r)})),A.addEventListener("click",(()=>{((t,e,n)=>{t.remove(),b.projects.forEach(((t,o)=>{let a=t.todos;t.name===e&&a.forEach(((e,a)=>{e.title===n&&t.todos.splice(a,1),B(o)}))}))})(i,a,c.textContent);const t=document.querySelectorAll(".project-info span");for(let e=0;e<t.length;e++)t[e].textContent=b.projects[e].todos.length}));const h=document.querySelectorAll(".project-info span");for(let t=0;t<h.length;t++)h[t].textContent=b.projects[t].todos.length;"string"!=typeof t&&(t.value="",e.value="",n.value="",mt.close())};b.createProject("Home","Default"),(()=>{const t=document.createElement("button"),e=document.createElement("div"),n=document.createElement("span");e.style.backgroundColor="white",e.classList.add("project-info"),e.style.backgroundColor="#d3d3d3d1",e.textContent="# Home / todos: ",n.textContent="0",t.textContent="# Home",t.classList.add("projects-btns");const o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("h3");r.textContent="Home",a.classList.add("project-container");const i=new Image;i.src=g,i.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(i,o.firstChild),o.addEventListener("click",(()=>{mt.showModal()})),a.append(r,o),a.append(r,o),_.appendChild(a),t.addEventListener("click",w),K.append(ot,t),e.appendChild(n),Z.appendChild(e)})();let gt=0;localStorage.getItem("Project 0")?(()=>{b.projects.shift();for(let t=0;t<localStorage.length;t++){let e=localStorage.getItem(`Project ${t}`);b.projects.push(JSON.parse(e))}b.projects.forEach((t=>{"Home"!==t.name&&pt(t.name,t.color);for(let e=0;e<t.todos.length;e++)0!==t.todos.length&&(ht(t.todos[e].title,t.todos[e].description,t.todos[e].dueDate,t.todos[e],t.name),document.querySelectorAll("label").forEach((n=>{if(n.textContent==t.todos[e].title){const o=n.parentElement.firstChild;1==t.todos[e].completed?(E(n,t.todos[e]),o.checked=!0):v(n,t.todos[e])}})))}))})():localStorage.setItem("Project 0",JSON.stringify(b.projects[0]))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,