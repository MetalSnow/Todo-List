(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>s});var o=n(354),a=n.n(o),r=n(314),i=n.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),i.push([e.id,'* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n}\n\n.plus {\n  width: 17px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n#todoAddBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: brown;\n  cursor: pointer;\n}\n\n#myProjects:hover {\n  background-color: rgba(165, 42, 42, 0.742);\n}\n\n.projects {\n  background-color: #e4e4e4;\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  gap: 5px;\n}\n\n.project-list {\n  background-color: #ababab8f;\n  width: 100%;\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,iCAAiC;EACjC,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,QAAQ;AACV;;AAEA;EACE,2BAA2B;EAC3B,WAAW;AACb;;AAEA,kBAAkB;AAClB;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,eAAe;AACjB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");\n\n* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n}\n\n.plus {\n  width: 17px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n#todoAddBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: brown;\n  cursor: pointer;\n}\n\n#myProjects:hover {\n  background-color: rgba(165, 42, 42, 0.742);\n}\n\n.projects {\n  background-color: #e4e4e4;\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  gap: 5px;\n}\n\n.project-list {\n  background-color: #ababab8f;\n  width: 100%;\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n'],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&i[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},i=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=r[l]||0,u="".concat(l," ").concat(d);r[l]=d+1;var m=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(h);else{var p=a(h,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var s=n(r[i]);t[s].references--}for(var c=o(e,a),l=0;l<r.length;l++){var d=n(r[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=c}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!e||!/^http(s?):/.test(e));)e=o[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0;var o={};(()=>{n.d(o,{uw:()=>oe,pw:()=>ne,cH:()=>g});var e=n(72),t=n.n(e),a=n(825),r=n.n(a),i=n(659),s=n.n(i),c=n(56),l=n.n(c),d=n(540),u=n.n(d),m=n(113),h=n.n(m),p=n(208),f={};f.styleTagTransform=h(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),t()(p.A,f),p.A&&p.A.locals&&p.A.locals;const A=n.p+"3d41484d7a6e692b1426.png",g=n.p+"f9cea8966e12ce82409b.png",y={projects:b=[],createProject:(e,t)=>{const n={name:e,color:t,todos:[],addNewTodo(e){this.todos.push(e)}};b.push(n)}};var b;const v=document.querySelector(".project-list"),C=document.querySelector(".todo-list"),E=document.querySelector(".projects"),w=document.querySelector("#myProjects"),x=document.querySelector(".proNum"),B=document.querySelector("#cancel"),M=document.querySelector(".CreateProject"),k=document.querySelector(".CreateTodo"),S=document.querySelector("#cancel-todo"),j=document.querySelector("#create-pro"),P=document.createElement("button"),D=document.querySelector("#create-todo"),W=e=>{v.style.display="none",C.style.display="block";const t=e.target.textContent.split("# ")[1];document.querySelectorAll(".project-container").forEach((e=>{const n=e.querySelector("h3").textContent;e.style.display=n===t?"block":"none"})),v.style.display="none",C.style.display="block"};function T(e){return function(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}(e,Date.now())}function q(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function L(e,t){const n=q(e),o=q(t),a=n.getTime()-o.getTime();return a<0?-1:a>0?1:a}Math.pow(10,8);const N=43200,F=1440;function Y(e){const t=q(e);return+function(e){const t=q(e);return t.setHours(23,59,59,999),t}(t)==+function(e){const t=q(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}(t)}function X(e,t){const n=q(e),o=q(t),a=L(n,o),r=Math.abs(function(e,t){const n=q(e),o=q(t);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(n,o));let i;if(r<1)i=0;else{1===n.getMonth()&&n.getDate()>27&&n.setDate(30),n.setMonth(n.getMonth()-a*r);let t=L(n,o)===-a;Y(q(e))&&1===r&&1===L(e,o)&&(t=!1),i=a*(r-Number(t))}return 0===i?0:i}function z(e,t,n){const o=function(e,t){return+q(e)-+q(t)}(e,t)/1e3;return(a=n?.roundingMethod,e=>{const t=(a?Math[a]:Math.trunc)(e);return 0===t?0:t})(o);var a}const H={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function O(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const R={date:O({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:O({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:O({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(e){return(t,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,a=n?.width?String(n.width):t;o=e.formattingValues[a]||e.formattingValues[t]}else{const t=e.defaultWidth,a=n?.width?String(n.width):e.defaultWidth;o=e.values[a]||e.values[t]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const U={ordinalNumber:(e,t)=>{const n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Q(e){return(t,n={})=>{const o=n.width,a=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;const i=r[0],s=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(i))return t}(s):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(i))return t}(s);let l;return l=e.valueCallback?e.valueCallback(c):c,l=n.valueCallback?n.valueCallback(l):l,{value:l,rest:t.slice(i.length)}}}const V={ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match($.matchPattern);if(!n)return null;const o=n[0],a=e.match($.parsePattern);if(!a)return null;let r=$.valueCallback?$.valueCallback(a[0]):a[0];return r=t.valueCallback?t.valueCallback(r):r,{value:r,rest:e.slice(o.length)}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var $;const Z={code:"en-US",formatDistance:(e,t,n)=>{let o;const a=H[e];return o="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:R,formatRelative:(e,t,n,o)=>I[e],localize:U,match:V,options:{weekStartsOn:0,firstWeekContainsDate:1}};let _={};function G(){return _}function K(e){const t=q(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function ee(e,t){return function(e,t,n){const o=G(),a=n?.locale??o.locale??Z,r=L(e,t);if(isNaN(r))throw new RangeError("Invalid time value");const i=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:r});let s,c;r>0?(s=q(t),c=q(e)):(s=q(e),c=q(t));const l=z(c,s),d=(K(c)-K(s))/1e3,u=Math.round((l-d)/60);let m;if(u<2)return n?.includeSeconds?l<5?a.formatDistance("lessThanXSeconds",5,i):l<10?a.formatDistance("lessThanXSeconds",10,i):l<20?a.formatDistance("lessThanXSeconds",20,i):l<40?a.formatDistance("halfAMinute",0,i):l<60?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",1,i):0===u?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",u,i);if(u<45)return a.formatDistance("xMinutes",u,i);if(u<90)return a.formatDistance("aboutXHours",1,i);if(u<F){const e=Math.round(u/60);return a.formatDistance("aboutXHours",e,i)}if(u<2520)return a.formatDistance("xDays",1,i);if(u<N){const e=Math.round(u/F);return a.formatDistance("xDays",e,i)}if(u<2*N)return m=Math.round(u/N),a.formatDistance("aboutXMonths",m,i);if(m=X(c,s),m<12){const e=Math.round(u/N);return a.formatDistance("xMonths",e,i)}{const e=m%12,t=Math.trunc(m/12);return e<3?a.formatDistance("aboutXYears",t,i):e<9?a.formatDistance("overXYears",t,i):a.formatDistance("almostXYears",t+1,i)}}(e,T(e),t)}class te{constructor(e,t,n,o,a){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.completed=a}}const ne=(e,t)=>{e.parentElement.style.opacity="0.5",e.style="text-decoration-line: line-through;",t.completed=!0},oe=(e,t)=>{e.parentElement.style.opacity="",e.style="",t.completed=!1},ae=new Image;ae.src=A,ae.classList.add("plus"),P.id="addBtn",P.textContent="New Project",P.insertBefore(ae,P.firstChild),P.addEventListener("click",(()=>{M.showModal()})),B.addEventListener("click",(()=>{M.close()})),S.addEventListener("click",(()=>{k.close()})),w.addEventListener("click",(()=>{v.style.display="block",C.style.display="none"})),D.addEventListener("click",(()=>{const e=document.querySelectorAll(".project-container"),t=document.querySelectorAll(".project-info span");e.forEach((e=>{if("block"===e.style.display){(e=>{const t=document.querySelector("#title"),n=document.querySelector("#description"),o=document.querySelector("#date"),a=document.querySelector("#priority");if(""===t.value||""===n.value||""===o.value)return void alert("Please Fill The Required Fields");const r=document.createElement("div"),i=document.createElement("div"),s=document.createElement("input"),c=document.createElement("label"),l=document.createElement("p"),d=document.createElement("p"),u=document.createElement("button");i.classList.add("todo"),u.textContent="Delete",s.setAttribute("type","checkbox"),s.setAttribute("id","todo"),s.setAttribute("name","todo"),c.setAttribute("for","todo");const m=ee(o.value,{addSuffix:!0});d.textContent=m,y.projects.forEach((r=>{if(r.name===e){const i=new te(t.value,n.value,o.value,a.value,!1);r.addNewTodo(i),c.textContent=i.title,l.textContent=i.description,console.log(e),console.log(y.projects),s.addEventListener("change",(()=>{s.checked?(console.log("Checkbox is checked.."),ne(c,i)):(console.log("Checkbox is not checked.."),oe(c,i))}))}})),i.append(s,c,l,d,u),r.appendChild(i),document.querySelectorAll(".project-container").forEach((t=>{t.querySelector("h3").textContent===e&&t.appendChild(r)})),u.addEventListener("click",(()=>{((e,t,n)=>{e.remove(),y.projects.forEach((e=>{let o=e.todos;e.name===t&&o.forEach((t=>{t.title===n&&e.todos.splice(o.indexOf(t),1)}))}))})(i,e,c.textContent)})),t.value="",n.value="",o.value="",k.close()})(e.firstChild.textContent)}}));for(let e=0;e<t.length;e++)t[e].textContent=y.projects[e].todos.length})),(()=>{const e=document.createElement("button"),t=document.createElement("div"),n=document.createElement("span");t.style.backgroundColor="white",t.classList.add("project-info"),t.textContent="# Home / todos: ",n.textContent="0",e.textContent="# Home";const o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("h3");r.textContent="Home",a.classList.add("project-container");const i=new Image;i.src=g,i.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(i,o.firstChild),o.addEventListener("click",(()=>{k.showModal()})),a.append(r,o),a.append(r,o),C.appendChild(a),e.addEventListener("click",W),E.append(P,e),t.appendChild(n),v.appendChild(t),y.createProject("Home","Default")})(),j.addEventListener("click",(()=>{let e=document.querySelector("#name"),t=document.querySelector("#color");if(""===e.value)return void alert("Please Enter Project's Name!");const n=document.createElement("button"),o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("span");a.textContent=`# ${e.value} / todos: `,r.textContent="0",n.textContent=`# ${e.value}`,n.style.backgroundColor=`light${t.value}`,a.style.backgroundColor=`light${t.value}`,a.classList.add("project-info"),a.setAttribute("id",""),a.appendChild(r),v.appendChild(a),E.appendChild(n),y.createProject(e.value,t.value);const i=document.createElement("div"),s=document.createElement("h3");s.textContent=e.value,i.classList.add("project-container"),i.style.display="block";const c=new Image;c.src=g,c.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(c,o.firstChild),o.addEventListener("click",(()=>{k.showModal()})),i.append(s,o),e.value="",x.textContent=y.projects.length,n.addEventListener("click",W),M.close(),document.querySelectorAll(".project-container").forEach((e=>{e.style.display="none"})),C.appendChild(i)})),console.log("are we back???")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,