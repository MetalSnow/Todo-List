(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>s});var o=n(354),a=n.n(o),r=n(314),i=n.n(r)()(a());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),i.push([t.id,'* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n}\n\n.plus {\n  width: 17px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n#todoAddBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: brown;\n  cursor: pointer;\n}\n\n#myProjects:hover {\n  background-color: rgba(165, 42, 42, 0.742);\n}\n\n.projects {\n  background-color: #e4e4e4;\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  gap: 5px;\n}\n\n.project-list {\n  background-color: #ababab8f;\n  width: 100%;\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,iCAAiC;EACjC,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,QAAQ;AACV;;AAEA;EACE,2BAA2B;EAC3B,WAAW;AACb;;AAEA,kBAAkB;AAClB;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,eAAe;AACjB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");\n\n* {\n  font-family: "Roboto", sans-serif;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  scroll-behavior: smooth;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  text-align: center;\n  background-color: bisque;\n}\n\n.plus {\n  width: 17px;\n}\n\n#addBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n#todoAddBtn {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 14px;\n  gap: 5px;\n  padding: 3px 5px;\n}\n\n.container {\n  display: flex;\n  height: 100%;\n}\n\n#myProjects {\n  color: white;\n  font-style: italic;\n  text-align: center;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  padding: 12px;\n  background-color: brown;\n  cursor: pointer;\n}\n\n#myProjects:hover {\n  background-color: rgba(165, 42, 42, 0.742);\n}\n\n.projects {\n  background-color: #e4e4e4;\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  gap: 5px;\n}\n\n.project-list {\n  background-color: #ababab8f;\n  width: 100%;\n}\n\n/* todos section */\n.todo-list {\n  display: none;\n  width: 100%;\n}\n\n.todo {\n  transition: all 0.6s ease 0s;\n}\n\nfooter {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  padding: 5px 8px;\n}\n\na {\n  color: rgb(212, 212, 212);\n  font-size: 15px;\n}\n'],sourceRoot:""}]);const s=i},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,a,r){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var r={},i=[],s=0;s<t.length;s++){var c=t[s],d=o.base?c[0]+o.base:c[0],l=r[d]||0,u="".concat(d," ").concat(l);r[d]=l+1;var m=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var h=a(p,o);o.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var r=o(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<r.length;i++){var s=n(r[i]);e[s].references--}for(var c=o(t,a),d=0;d<r.length;d++){var l=n(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={id:o,exports:{}};return t[o](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0;var o={};(()=>{n.d(o,{uw:()=>at,pw:()=>ot,cH:()=>g,OQ:()=>it});var t=n(72),e=n.n(t),a=n(825),r=n.n(a),i=n(659),s=n.n(i),c=n(56),d=n.n(c),l=n(540),u=n.n(l),m=n(113),p=n.n(m),h=n(208),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),e()(h.A,f),h.A&&h.A.locals&&h.A.locals;const A=n.p+"3d41484d7a6e692b1426.png",g=n.p+"f9cea8966e12ce82409b.png",b={projects:y=[],createProject:(t,e)=>{const n={name:t,color:e,todos:[],addNewTodo(t){this.todos.push(t)}};y.push(n)}};var y;const v=document.querySelector(".project-list"),C=document.querySelector(".todo-list"),E=document.querySelector(".projects"),x=document.querySelector("#myProjects"),w=document.querySelector(".proNum"),B=document.querySelector("#cancel"),M=document.querySelector(".CreateProject"),k=document.querySelector(".CreateTodo"),S=document.querySelector("#cancel-todo"),j=document.querySelector("#create-pro"),P=document.createElement("button"),D=document.querySelector("#create-todo"),W=t=>{v.style.display="none",C.style.display="block";const e=t.target.textContent.split("# ")[1];document.querySelectorAll(".project-container").forEach((t=>{const n=t.querySelector("h3").textContent;t.style.display=n===e?"block":"none"})),v.style.display="none",C.style.display="block"};function T(t){return function(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}(t,Date.now())}function q(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function L(t,e){const n=q(t),o=q(e),a=n.getTime()-o.getTime();return a<0?-1:a>0?1:a}Math.pow(10,8);const N=43200,F=1440;function Y(t){const e=q(t);return+function(t){const e=q(t);return e.setHours(23,59,59,999),e}(e)==+function(t){const e=q(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e)}function X(t,e){const n=q(t),o=q(e),a=L(n,o),r=Math.abs(function(t,e){const n=q(t),o=q(e);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(n,o));let i;if(r<1)i=0;else{1===n.getMonth()&&n.getDate()>27&&n.setDate(30),n.setMonth(n.getMonth()-a*r);let e=L(n,o)===-a;Y(q(t))&&1===r&&1===L(t,o)&&(e=!1),i=a*(r-Number(e))}return 0===i?0:i}function z(t,e,n){const o=function(t,e){return+q(t)-+q(e)}(t,e)/1e3;return(a=n?.roundingMethod,t=>{const e=(a?Math[a]:Math.trunc)(t);return 0===e?0:e})(o);var a}const R={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function H(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const O={date:H({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:H({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:H({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;o=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;o=t.values[a]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const Q={ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function U(t){return(e,n={})=>{const o=n.width,a=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],r=e.match(a);if(!r)return null;const i=r[0],s=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}const V={ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match($.matchPattern);if(!n)return null;const o=n[0],a=t.match($.parsePattern);if(!a)return null;let r=$.valueCallback?$.valueCallback(a[0]):a[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(o.length)}}),era:U({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:U({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:U({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:U({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:U({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var $;const Z={code:"en-US",formatDistance:(t,e,n)=>{let o;const a=R[t];return o="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:O,formatRelative:(t,e,n,o)=>I[t],localize:Q,match:V,options:{weekStartsOn:0,firstWeekContainsDate:1}};let _={};function G(){return _}function K(t){const e=q(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function tt(t,e){return function(t,e,n){const o=G(),a=n?.locale??o.locale??Z,r=L(t,e);if(isNaN(r))throw new RangeError("Invalid time value");const i=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:r});let s,c;r>0?(s=q(e),c=q(t)):(s=q(t),c=q(e));const d=z(c,s),l=(K(c)-K(s))/1e3,u=Math.round((d-l)/60);let m;if(u<2)return n?.includeSeconds?d<5?a.formatDistance("lessThanXSeconds",5,i):d<10?a.formatDistance("lessThanXSeconds",10,i):d<20?a.formatDistance("lessThanXSeconds",20,i):d<40?a.formatDistance("halfAMinute",0,i):d<60?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",1,i):0===u?a.formatDistance("lessThanXMinutes",1,i):a.formatDistance("xMinutes",u,i);if(u<45)return a.formatDistance("xMinutes",u,i);if(u<90)return a.formatDistance("aboutXHours",1,i);if(u<F){const t=Math.round(u/60);return a.formatDistance("aboutXHours",t,i)}if(u<2520)return a.formatDistance("xDays",1,i);if(u<N){const t=Math.round(u/F);return a.formatDistance("xDays",t,i)}if(u<2*N)return m=Math.round(u/N),a.formatDistance("aboutXMonths",m,i);if(m=X(c,s),m<12){const t=Math.round(u/N);return a.formatDistance("xMonths",t,i)}{const t=m%12,e=Math.trunc(m/12);return t<3?a.formatDistance("aboutXYears",e,i):t<9?a.formatDistance("overXYears",e,i):a.formatDistance("almostXYears",e+1,i)}}(t,T(t),e)}class et{constructor(t,e,n,o,a,r){this.id=t,this.title=e,this.description=n,this.dueDate=o,this.priority=a,this.completed=r}}const nt=t=>{const e=document.querySelector("#title"),n=document.querySelector("#description"),o=document.querySelector("#date"),a=document.querySelector("#priority");if(""===e.value||""===n.value||""===o.value)return void alert("Please Fill The Required Fields");const r=document.createElement("div"),i=document.createElement("div"),s=document.createElement("input"),c=document.createElement("label"),d=document.createElement("p"),l=document.createElement("p"),u=document.createElement("div"),m=document.createElement("button"),p=document.createElement("button");i.classList.add("todo"),m.textContent="Delete",p.textContent="edit",s.setAttribute("type","checkbox"),s.setAttribute("id","todo"),s.setAttribute("name","todo"),c.setAttribute("for","todo");const h=o.value,f=tt(o.value,{addSuffix:!0});l.textContent=f,it++,b.projects.forEach((r=>{if(r.name===t){const i=new et(it,e.value,n.value,o.value,a.value,!1);r.addNewTodo(i),c.textContent=i.title,d.textContent=i.description,p.addEventListener("click",(()=>{((t,e,n,o,a,r,i)=>{const s=document.createElement("dialog");s.classList.add("edit-todo"),s.dataset.todoId=t.id;const c=document.createElement("h3");c.textContent="Edit Task",s.appendChild(c);const d=document.createElement("div"),l=document.createElement("label");l.setAttribute("for","edit-title"),l.textContent="Title :";const u=document.createElement("input");u.setAttribute("type","text"),u.setAttribute("id","edit-title"),u.setAttribute("name","edit-title"),u.setAttribute("placeholder","Enter Title"),u.value=o.textContent,d.appendChild(l),d.appendChild(u);const m=document.createElement("label");m.setAttribute("for","edit-description"),m.textContent="Description :";const p=document.createElement("input");p.setAttribute("type","text"),p.setAttribute("id","edit-description"),p.setAttribute("name","edit-description"),p.setAttribute("placeholder","Write Description"),p.value=a.textContent,d.appendChild(m),d.appendChild(p);const h=document.createElement("label");h.setAttribute("for","edit-date"),h.textContent="Due Date :";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","edit-date"),f.setAttribute("name","edit-date"),f.setAttribute("min","2024-01-01"),f.value=i,d.appendChild(h),d.appendChild(f);const A=document.createElement("label");A.setAttribute("for","edit-priority"),A.textContent="Set Priority :";const g=document.createElement("select");g.setAttribute("id","edit-priority"),g.setAttribute("name","edit-priority"),["Priority 1","Priority 2","Priority 3","Priority 4"].forEach((t=>{const e=document.createElement("option");e.value=t,e.textContent=t,g.appendChild(e)})),d.appendChild(A),d.appendChild(g);const y=document.createElement("button");y.setAttribute("id","cancel-edit"),y.textContent="Cancel",y.addEventListener("click",(()=>{s.close(),s.remove()}));const v=document.createElement("button");v.setAttribute("id","edit-todo"),v.textContent="Confirm",v.addEventListener("click",(()=>{((t,e,n,o,a,r,i,s,c)=>{b.projects.forEach((n=>{let o=n.todos;n.name===t&&o.forEach((t=>{t===e&&(e.title=r.value,e.description=i.value,e.dueDate=s.value,e.priority=c.value)}))}));const d=tt(s.value,{addSuffix:!0});n.textContent=r.value,o.textContent=i.value,a.textContent=d})(e,n,o,a,r,u,p,f,g),s.close(),s.remove()})),d.appendChild(y),d.appendChild(v),s.appendChild(d),document.body.appendChild(s),s.showModal()})(i,t,i,c,d,l,h)})),s.addEventListener("change",(()=>{s.checked?ot(c,i):at(c,i)}))}})),p.setAttribute("id",c.textContent),u.append(p,m),i.append(s,c,d,l,u),r.appendChild(i),document.querySelectorAll(".project-container").forEach((e=>{e.querySelector("h3").textContent===t&&e.appendChild(r)})),m.addEventListener("click",(()=>{((t,e,n)=>{t.remove(),b.projects.forEach((t=>{let o=t.todos;t.name===e&&o.forEach(((e,o)=>{e.title===n&&t.todos.splice(o,1)}))}))})(i,t,c.textContent)})),e.value="",n.value="",o.value="",k.close()},ot=(t,e)=>{t.parentElement.style.opacity="0.5",t.style="text-decoration-line: line-through;",e.completed=!0},at=(t,e)=>{t.parentElement.style.opacity="",t.style="",e.completed=!1},rt=new Image;rt.src=A,rt.classList.add("plus"),P.id="addBtn",P.textContent="New Project",P.insertBefore(rt,P.firstChild),P.addEventListener("click",(()=>{M.showModal()})),B.addEventListener("click",(()=>{M.close()})),x.addEventListener("click",(()=>{v.style.display="block",C.style.display="none"}));let it=0;D.addEventListener("click",(()=>{const t=document.querySelectorAll(".project-container"),e=document.querySelectorAll(".project-info span");t.forEach((t=>{if("block"===t.style.display){const e=t.firstChild.textContent;nt(e)}}));for(let t=0;t<e.length;t++)e[t].textContent=b.projects[t].todos.length})),S.addEventListener("click",(()=>{k.close()})),(()=>{const t=document.createElement("button"),e=document.createElement("div"),n=document.createElement("span");e.style.backgroundColor="white",e.classList.add("project-info"),e.textContent="# Home / todos: ",n.textContent="0",t.textContent="# Home";const o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("h3");r.textContent="Home",a.classList.add("project-container");const i=new Image;i.src=g,i.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(i,o.firstChild),o.addEventListener("click",(()=>{k.showModal()})),a.append(r,o),a.append(r,o),C.appendChild(a),t.addEventListener("click",W),E.append(P,t),e.appendChild(n),v.appendChild(e),b.createProject("Home","Default")})(),j.addEventListener("click",(()=>{let t=document.querySelector("#name"),e=document.querySelector("#color");if(""===t.value)return void alert("Please Enter Project's Name!");const n=document.createElement("button"),o=document.createElement("button"),a=document.createElement("div"),r=document.createElement("span"),i=document.createElement("button");a.textContent=`# ${t.value} / todos: `,r.textContent="0",n.textContent=`# ${t.value}`,n.style.backgroundColor=`light${e.value}`,a.style.backgroundColor=`light${e.value}`,a.classList.add("project-info"),a.setAttribute("id",""),i.textContent="Remove Project",a.append(r,i),v.appendChild(a),E.appendChild(n),b.createProject(t.value,e.value);const s=document.createElement("div"),c=document.createElement("h3");c.textContent=t.value,s.classList.add("project-container"),s.style.display="block";const d=new Image;d.src=g,d.classList.add("plus"),o.classList.add("todo-add-btn"),o.textContent="Add Task",o.insertBefore(d,o.firstChild),o.addEventListener("click",(()=>{k.showModal()})),s.append(c,o);const l=c.textContent.split().splice(0,1).join();i.addEventListener("click",(()=>{((t,e,n,o)=>{t.remove(),e.remove(),n.remove();const a=b.projects;a.forEach(((t,e)=>{t.name===o&&a.splice(e,1)}))})(a,n,s,l)})),t.value="",w.textContent=b.projects.length,n.addEventListener("click",W),M.close(),document.querySelectorAll(".project-container").forEach((t=>{t.style.display="none"})),C.appendChild(s)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,